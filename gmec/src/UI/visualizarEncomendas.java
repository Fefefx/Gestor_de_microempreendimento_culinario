/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI;

import Control.encomendaControl;
import Control.produtoEncomendaControl;
import Objects.encomenda;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;
import Services.objetoPesquisa;
import Services.data;

/**
 *
 * @author felip
 */
public class visualizarEncomendas extends javax.swing.JFrame {

    ArrayList listaEncomendas = new ArrayList();
    encomenda pedido = new encomenda();
    private boolean fechar;
    private String user;

    public void setUser(String user) {
        this.user = user;
    }

    /**
     * Creates new form visualizarEncomendas
     */
    public visualizarEncomendas() {
        initComponents();
        localizarTodos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        CT_user = new javax.swing.JTextField();
        B_filtrar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        Tab_encomendas = new javax.swing.JTable();
        B_novo = new javax.swing.JButton();
        CAL_limiteData = new com.toedter.calendar.JDateChooser();
        jLabel1 = new javax.swing.JLabel();
        CC_statusEntrega = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        CC_statusPagamento = new javax.swing.JComboBox<>();
        B_mostrarTudo = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Localizar encomenda");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jLabel2.setText("Digite um cliente:");

        B_filtrar.setText("Filtrar");
        B_filtrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                B_filtrarActionPerformed(evt);
            }
        });

        Tab_encomendas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Nome", "Telefone", "Data de Entrega", "Entrega", "Pagamento"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Tab_encomendas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Tab_encomendasMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(Tab_encomendas);

        B_novo.setText("Novo");
        B_novo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                B_novoActionPerformed(evt);
            }
        });

        jLabel1.setText("De hoje até:");

        CC_statusEntrega.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Todas", "Entregues", "Pendentes" }));

        jLabel3.setText("Entregue:");

        jLabel4.setText("Pagas:");

        CC_statusPagamento.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Todas", "Pagas", "Não pagas" }));

        B_mostrarTudo.setText("Mostrar Tudo");
        B_mostrarTudo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                B_mostrarTudoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CT_user, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(CAL_limiteData, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34)
                        .addComponent(B_mostrarTudo)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 756, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(29, 29, 29)
                                .addComponent(CC_statusEntrega, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(45, 45, 45)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(CC_statusPagamento, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(34, 34, 34)
                                .addComponent(B_filtrar, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(38, 38, 38)
                                .addComponent(B_novo, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(23, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(329, 329, 329))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(CAL_limiteData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(B_mostrarTudo))
                        .addGap(18, 18, 18))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(CT_user, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(20, 20, 20)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CC_statusEntrega, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(CC_statusPagamento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(B_novo)
                    .addComponent(B_filtrar))
                .addGap(18, 18, 18)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(33, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void B_filtrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_B_filtrarActionPerformed
        localizaRegistros();
    }//GEN-LAST:event_B_filtrarActionPerformed

    private void Tab_encomendasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Tab_encomendasMouseClicked
        pedido = localizarEncomenda();
        constroiEncomenda();
        vendaEncomenda ve = new vendaEncomenda();
        fechar = true;
        ve.setUser(user);
        ve.armazenarDados(pedido);
        ve.arrumaTelaUpdate(pedido);
        ve.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_Tab_encomendasMouseClicked

    private void B_novoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_B_novoActionPerformed
        fechar = true;
        vendaEncomenda ve = new vendaEncomenda();
        ve.setUser(user);
        ve.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_B_novoActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        if (!fechar) {
            telaInicial start = new telaInicial();
            start.arrumaTela(user);
            start.setVisible(true);
            this.dispose();
        }
    }//GEN-LAST:event_formWindowClosed

    private void B_mostrarTudoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_B_mostrarTudoActionPerformed
        localizarTodos();
        CC_statusEntrega.setSelectedIndex(0);
        CC_statusPagamento.setSelectedIndex(0);
    }//GEN-LAST:event_B_mostrarTudoActionPerformed

    public void localizarTodos() {
        encomendaControl buscar = new encomendaControl();
        listaEncomendas = buscar.retornarTodasEncomendas();
        arrumaTabela();
    }

    public void localizaRegistros() {
        encomendaControl enco = new encomendaControl();
        listaEncomendas = enco.pesquisarEncomendas(constroiObjetoPesquisa());
        arrumaTabelaSelecionada();
    }

    public void arrumaTabela() {
        DefaultTableModel modelo = (DefaultTableModel) Tab_encomendas.getModel();
        while (modelo.getRowCount() != 0) {
            modelo.removeRow(0);
        }
        for (int i = 0; i < listaEncomendas.size(); i++) {
            encomenda dado = (encomenda) listaEncomendas.get(i);
            String[] linha = new String[5];
            linha[0] = dado.client.getNome();
            linha[1] = String.valueOf(dado.client.getTelefone());
            linha[2] = formataData(dado.getDiaEntrega());
            if (dado.isStatus()) {
                linha[3] = "Entregue";
            } else {
                linha[3] = "Não Entregue";
            }
            if (dado.isStatusPagamento()) {
                linha[4] = "Pago";
            } else {
                linha[4] = "Pendente";
            }
            modelo.addRow(linha);
        }
        Tab_encomendas.setModel(modelo);
    }

    public void arrumaTabelaSelecionada() {
        DefaultTableModel modelo = (DefaultTableModel) Tab_encomendas.getModel();
        while (modelo.getRowCount() != 0) {
            modelo.removeRow(0);
        }
        for (int i = 0; i < listaEncomendas.size(); i++) {
            encomenda dado = (encomenda) listaEncomendas.get(i);
            int status_entrega = CC_statusEntrega.getSelectedIndex();
            int status_pagamento = CC_statusPagamento.getSelectedIndex();
            if (status_entrega != 0) {
                if (status_entrega == 1 && !dado.isStatus() || status_entrega == 2 && dado.isStatus()) {
                    continue;
                }
            }
            if (status_pagamento != 0) {
                if (status_pagamento == 1 && !dado.isStatusPagamento() || status_pagamento == 2 && dado.isStatusPagamento()) {
                    continue;
                }
            }
            String[] linha = new String[5];
            linha[0] = dado.client.getNome();
            linha[1] = String.valueOf(dado.client.getTelefone());
            linha[2] = formataData(dado.getDiaEntrega());
            if (dado.isStatus()) {
                linha[3] = "Entregue";
            } else {
                linha[3] = "Não Entregue";
            }
            if (dado.isStatusPagamento()) {
                linha[4] = "Pago";
            } else {
                linha[4] = "Pendente";
            }
            modelo.addRow(linha);
        }
        Tab_encomendas.setModel(modelo);
    }

    public String formataData(String data) {
        String dataFormatada = data.substring(8, 10) + "/" + data.substring(5, 7) + "/" + data.substring(0, 4);
        return dataFormatada;
    }

    public void constroiEncomenda() {
        produtoEncomendaControl localizarItens = new produtoEncomendaControl();
        pedido.adicionarItens(localizarItens.localizarProdutos(pedido.getCodigoEncomenda()));
    }

    public objetoPesquisa constroiObjetoPesquisa() {
        objetoPesquisa dados = new objetoPesquisa();
        dados.setCliente(CT_user.getText());
        data time = new data();
        dados.setDiaAtual(time.formatarBanco(time.obterData()));
        dados.setDiaLimite(time.formatarBanco(CAL_limiteData.getDate()));
        return dados;
    }
    
    public encomenda localizarEncomenda(){
        int linha= Tab_encomendas.getSelectedRow();
        if(linha!=-1){
            boolean entrega, pagamento;
            String nome=String.valueOf(Tab_encomendas.getValueAt(linha, 0));
            String dataEntrega=String.valueOf(Tab_encomendas.getValueAt(linha, 2));
            data time = new data();
            dataEntrega=time.formatarBanco(dataEntrega);
            String temp=String.valueOf(Tab_encomendas.getValueAt(linha, 3));
            if(temp.equals("Entregue")){
                entrega=true;
            }else{
                entrega=false;
            }
            temp=String.valueOf(Tab_encomendas.getValueAt(linha, 4));
            if(temp.equals("Pago")){
                pagamento=true;
            }else{
                pagamento=false;
            }
            for(int i=0;i<listaEncomendas.size();i++){
                encomenda enco = (encomenda) listaEncomendas.get(i);
                if(nome.equals(enco.client.getNome()) && dataEntrega.equals(enco.getDiaEntrega())){
                    if(entrega==enco.isStatus() && pagamento==enco.isStatusPagamento()){
                        return enco;
                    }
                }
            }
        }
        return null;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(visualizarEncomendas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(visualizarEncomendas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(visualizarEncomendas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(visualizarEncomendas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new visualizarEncomendas().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton B_filtrar;
    private javax.swing.JButton B_mostrarTudo;
    private javax.swing.JButton B_novo;
    private com.toedter.calendar.JDateChooser CAL_limiteData;
    private javax.swing.JComboBox<String> CC_statusEntrega;
    private javax.swing.JComboBox<String> CC_statusPagamento;
    private javax.swing.JTextField CT_user;
    private javax.swing.JTable Tab_encomendas;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables
}
